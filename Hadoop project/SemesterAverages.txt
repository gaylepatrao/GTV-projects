package org.myorg;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.fs.FileSystem;

public class SemesterAverages //Driver class
{
	public static void main(String[] args) throws IllegalArgumentException, IOException, ClassNotFoundException, InterruptedException
	{
		if (args.length != 4)
		{
			//User must provide input path, temporary path and output path, otherwise Driver class will not run
			System.err.println("Command Format: SemesterAverages <input path> <temp path> <output path>");
			System.exit(-1);
		}
		
		//Job 1: Calling Mapper-Reducer for Averages calculation
		Configuration conf=new Configuration();
		Job job1=Job.getInstance(conf,"Averages");
		job1.setJarByClass(SemesterAverages.class);
		
		job1.setMapperClass(SemAvgMapper.class);
		job1.setReducerClass(SemAvgReducer.class);
		
		job1.setMapOutputKeyClass(Text.class);
		job1.setMapOutputValueClass(DoubleWritable.class);
		
		FileInputFormat.addInputPath(job1, new Path(args[1]));
		FileOutputFormat.setOutputPath(job1, new Path(args[2])); //setting output path as user's temporary path
		boolean success = job1.waitForCompletion(true);
		
		//Job 2: Calling Mapper-Reducer for Semester Maximum calculation only if Job 1 is successful
		if (success) {
			Configuration conf2=new Configuration();
		    Job job2 = Job.getInstance(conf2, "SemesterMax");
			job2.setJarByClass(SemesterAverages.class);
		    
			job2.setMapperClass(SemMaxMapper.class);
		    job2.setReducerClass(SemMaxReducer.class);
		    
		    job2.setOutputKeyClass(Text.class);
			job2.setOutputValueClass(Text.class);
		    
		    //setting input path as the temporary path given by user which has previous Reducer's output
			FileInputFormat.addInputPath(job2, new Path(args[2]));
		    FileOutputFormat.setOutputPath(job2, new Path(args[3]));
		       
		 // Delete final output folder if exists
		   	FileSystem hdfs = FileSystem.get(conf);
	        		Path outputDir = new Path(args[3]); //writing the final output
			if (hdfs.exists(outputDir))
	          	    hdfs.delete(outputDir, true);

			System.exit(job2.waitForCompletion(true) ? 0 : 1);
		}
	}
}